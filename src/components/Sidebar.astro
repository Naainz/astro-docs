---
import { readdirSync, statSync, readFileSync } from 'fs';
import { basename, join } from 'path';
import matter from 'gray-matter';
import sidebarConfig from '../config/sidebar.json';

const pagesDir = new URL('../pages', import.meta.url).pathname;

function isDirectory(path) {
  return statSync(path).isDirectory();
}

function getPageData(filePath, parentDir = '') {
  if (isDirectory(filePath)) return null;
  const fileContent = readFileSync(filePath, 'utf8');
  const { data } = matter(fileContent);
  const fileName = basename(filePath, '.mdx');

  const path = fileName === 'index' ? `/${parentDir}` : `/${parentDir}${fileName}`;
  const name = data.path || (fileName === 'index' ? parentDir.slice(0, -1) || '' : fileName).replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

  return { path, name, relativePath: join(parentDir, fileName + '.mdx') };
}

const currentPath = Astro.url.pathname.replace(/^\//, '').replace(/\/$/, '');

const categories = sidebarConfig.order.map(category => {
  const categoryItems = category.items.map(fileOrDir => {
    if (typeof fileOrDir === 'object' && fileOrDir.redirect) {
      return {
        name: fileOrDir.name,
        redirect: fileOrDir.redirect
      };
    }

    const fullPath = join(pagesDir, fileOrDir);
    if (isDirectory(fullPath)) {
      const dirPath = `${fileOrDir}`;
      const indexFilePath = join(fullPath, 'index.mdx');
      const dirFiles = readdirSync(fullPath)
        .filter(file => file.endsWith('.mdx') && file !== 'index.mdx')
        .map(file => getPageData(join(fullPath, file), `${dirPath}/`))
        .filter(Boolean);

      return {
        name: getPageData(indexFilePath, `${dirPath}/`)?.name || dirPath.replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
        path: `/${dirPath}`,
        isDirectory: true,
        items: dirFiles,
      };
    } else {
      return getPageData(fullPath);
    }
  }).filter(Boolean);

  return {
    name: category.category,
    items: categoryItems
  };
});
---

<aside class="w-56 px-3 py-2 flex flex-col h-full fixed-sidebar">
  <nav class="flex-1">
    {categories.map((category, index) => (
      <div class={`space-y-2 ${index !== 0 ? 'mt-10' : ''}`} key={index}>
        {category.name && (
          <h3 class="text-sm font-bold text-gray-600 dark:text-white pl-3">
            {category.name}
          </h3>
        )}
        {category.items.map((link, linkIndex) => (
          <div key={linkIndex}>
            {link.redirect ? (
              <a 
                href={link.redirect} 
                target="_blank"
                rel="noopener noreferrer"
                class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                  currentPath === link.redirect 
                    ? 'bg-[#E0EFFF] text-[#004CA3]'
                    : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800' 
                } flex items-center justify-between`}
              >
                <span>{link.name}</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 transform transition-transform duration-300"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 17l10-10M7 7h10v10" />
                </svg>
              </a>
            ) : link.isDirectory ? (
              <div>
                <a 
                  href={link.path} 
                  data-directory 
                  class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 flex items-center justify-between ${
                    currentPath.startsWith(link.path) 
                      ? 'bg-[#E0EFFF] text-[#004CA3]'
                      : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'
                  }`}
                >
                  <span>{link.name}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 transform transition-transform duration-300 rotate-90"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
                <div class="ml-4 mt-2 space-y-2 relative">
                  <div class="absolute left-[-10px] top-0 bottom-0 w-px bg-gray-300 dark:bg-gray-600"></div>
                  {link.items.map((subLink, subLinkIndex) => (
                    <a 
                      key={subLinkIndex}
                      href={subLink.path} 
                      class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                        currentPath === subLink.path 
                          ? 'bg-[#E0EFFF] text-[#004CA3]'  
                          : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'
                      }`}
                    >
                      {subLink.name}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={link.path} 
                class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                  currentPath === link.path 
                    ? 'bg-[#E0EFFF] text-[#004CA3]' 
                    : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'
                }`}
              >
                {link.name}
              </a>
            )}
          </div>
        ))}
      </div>
    ))}
  </nav>

  <div class="mt-6 space-y-3 flex-1 flex flex-col justify-end">
    <div 
      onclick="handleFeedbackClick()"
      class="block text-sm cursor-pointer transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Questions? Give us feedback
      <i class="fas fa-arrow-right"></i>
    </div>
    <div 
      onclick="handleEditClick()"
      class="block text-sm cursor-pointer transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Edit this page on GitHub
      <i class="fas fa-arrow-right"></i>
    </div>
    <div 
      onclick="window.scrollTo({ top: 0, behavior: 'smooth' }); return false;" 
      class="block text-sm cursor-pointer transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Scroll to top
      <i class="fas fa-arrow-up"></i>
    </div>
  </div>
</aside>

<script>
  window.handleFeedbackClick = function () {
    const currentPath = window.location.pathname.replace(/^\//, '').replace(/\/$/, '');
    const issueUrl = `https://github.com/Naainz/astro-docs/issues/new?title=Feedback%20for%20“${encodeURIComponent(currentPath || 'Home')}”`;
    console.log('Opening GitHub issue page:', issueUrl);
    window.open(issueUrl, '_blank');
  };

  window.handleEditClick = function () {
    const currentPath = window.location.pathname.replace(/^\//, '').replace(/\/$/, '');
    const filePath = currentPath === '' ? 'index.mdx' : `${currentPath}.mdx`;
    const editUrl = `https://github.com/Naainz/astro-docs/edit/main/src/pages/${filePath}`;
    console.log('Opening GitHub edit page:', editUrl);
    window.open(editUrl, '_blank');
  };
</script>
