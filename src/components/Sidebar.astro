---
import { readdirSync, statSync } from 'fs';
import { basename, join } from 'path';
import sidebarConfig from '../config/sidebar.json';

const pagesDir = new URL('../pages', import.meta.url).pathname;
const files = readdirSync(pagesDir);

// Function to check if a path is a directory
function isDirectory(path) {
  return statSync(path).isDirectory();
}

// Build the links structure from the config file
const categories = sidebarConfig.order.map(category => {
  const categoryItems = category.items.map(fileOrDir => {
    const fullPath = join(pagesDir, fileOrDir);
    if (isDirectory(fullPath)) {
      const dirFiles = readdirSync(fullPath)
        .filter(file => file !== 'index.mdx' && file.endsWith('.mdx'))
        .map(file => ({
          name: basename(file, '.mdx').replace(/-/g, ' ').replace(/_/g, ' '),
          path: `/${fileOrDir}/${basename(file, '.mdx')}`
        }));

      return {
        name: fileOrDir,
        path: `/${fileOrDir}/`,
        isDirectory: true,
        items: dirFiles,
      };
    } else {
      return {
        name: basename(fileOrDir, '.mdx').replace(/-/g, ' ').replace(/_/g, ' '),
        path: `/${basename(fileOrDir, '.mdx')}`
      };
    }
  });

  return {
    name: category.category,
    items: categoryItems
  };
});

const currentPath = Astro.url.pathname;

// Helper to check if a directory should be expanded
function isExpanded(path) {
  return currentPath.startsWith(path);
}
---

<aside class="w-56 px-3 py-2">
  <nav>
    {categories.map((category, index) => (
      <div class={`space-y-2 ${index !== 0 ? 'mt-10' : ''}`}>
        <h3 class="text-sm font-bold text-gray-600 dark:text-white pl-3">
          {category.name}
        </h3>
        {category.items.map(link => (
          <>
            {link.isDirectory ? (
              <div>
                <a 
                  href={link.path} 
                  class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 flex items-center justify-between ${
                    currentPath === link.path 
                      ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected folder: Background #E0EFFF, text #004CA3
                      : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected folder: Dark mode color #A3A3A3
                  }`}
                  onclick="navigateAndToggle(event, '{link.path}')"
                >
                  <span>{link.name.charAt(0).toUpperCase() + link.name.slice(1)}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class={`h-4 w-4 transform transition-transform duration-300 ${
                      isExpanded(link.path) ? 'rotate-90' : 'rotate-0'
                    }`}
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
                <div id="${link.path}" class={`ml-4 mt-2 space-y-2 transition-max-height duration-500 ease-in-out overflow-hidden ${isExpanded(link.path) ? 'max-h-screen' : 'max-h-0'}`}>
                  {link.items.map(subLink => (
                    <a 
                      href={subLink.path} 
                      class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                        currentPath === subLink.path 
                          ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected file in folder: Background #E0EFFF, text #004CA3
                          : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected files in folder: Dark mode color #A3A3A3
                      }`}
                    >
                      {subLink.name.charAt(0).toUpperCase() + subLink.name.slice(1)}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={link.path} 
                class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                  currentPath === link.path 
                    ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected button: Background #E0EFFF, text #004CA3
                    : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected buttons: Dark mode color #A3A3A3
                }`}
                onclick="navigateAndToggle(event, '{link.path}')"
              >
                {link.name.charAt(0).toUpperCase() + link.name.slice(1)}
              </a>
            )}
          </>
        ))}
      </div>
    ))}
  </nav>
</aside>
