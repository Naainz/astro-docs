---
import { readdirSync, statSync, readFileSync } from 'fs';
import { basename, join } from 'path';
import matter from 'gray-matter';
import sidebarConfig from '../config/sidebar.json';

const pagesDir = new URL('../pages', import.meta.url).pathname;

// Function to check if a path is a directory
function isDirectory(path) {
  return statSync(path).isDirectory();
}

// Function to read the frontmatter of an MDX file and return its name and path
function getPageData(filePath, parentDir = '') {
  if (isDirectory(filePath)) return null; // Skip directories
  const fileContent = readFileSync(filePath, 'utf8');
  const { data } = matter(fileContent);
  const fileName = basename(filePath, '.mdx');

  // If the file is 'index.mdx', treat it as the root path or the parent directory path
  const path = fileName === 'index' ? (parentDir || '/') : `/${parentDir}${fileName}`;
  const name = data.path || (fileName === 'index' ? parentDir.slice(0, -1) || 'Home' : fileName).replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

  // Return the page's path and name
  return { path, name, relativePath: join(parentDir, fileName + '.mdx') };
}

// Determine the current file based on the URL path
const currentPath = Astro.url.pathname.replace(/^\//, '').replace(/\/$/, '');

// Build the links structure from the config file
const categories = sidebarConfig.order.map(category => {
  const categoryItems = category.items.map(fileOrDir => {
    if (typeof fileOrDir === 'object' && fileOrDir.redirect) {
      // Handle redirect links
      return {
        name: fileOrDir.name,
        redirect: fileOrDir.redirect
      };
    }

    const fullPath = join(pagesDir, fileOrDir);
    if (isDirectory(fullPath)) {
      const dirFiles = readdirSync(fullPath)
        .filter(file => file.endsWith('.mdx') && file !== 'index.mdx') // Exclude 'index.mdx' from being listed as a separate file
        .map(file => getPageData(join(fullPath, file), `${fileOrDir}/`))
        .filter(Boolean); // Filter out null values

      return {
        name: getPageData(join(fullPath, 'index.mdx'), `${fileOrDir}/`)?.name || fileOrDir.replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
        path: `/${fileOrDir}/`,
        isDirectory: true,
        items: dirFiles,
      };
    } else {
      return getPageData(fullPath);
    }
  }).filter(Boolean); // Filter out null values

  return {
    name: category.category,
    items: categoryItems
  };
});
---

<aside class="w-56 px-3 py-2 flex flex-col h-full">
  <nav class="flex-1">
    {categories.map((category, index) => (
      <div class={`space-y-2 ${index !== 0 ? 'mt-10' : ''}`} key={index}>
        {category.name && (
          <h3 class="text-sm font-bold text-gray-600 dark:text-white pl-3">
            {category.name}
          </h3>
        )}
        {category.items.map((link, linkIndex) => (
          <div key={linkIndex}>
            {link.redirect ? (
              <a 
                href={link.redirect} 
                target="_blank"
                rel="noopener noreferrer"
                class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                  currentPath === link.redirect 
                    ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected redirect link: Background #E0EFFF, text #004CA3
                    : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected redirect link: Dark mode color #A3A3A3
                } flex items-center justify-between`}
              >
                <span>{link.name}</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 transform transition-transform duration-300"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 17l10-10M7 7h10v10" />
                </svg>
              </a>
            ) : link.isDirectory ? (
              <div>
                <a 
                  href={link.path} 
                  data-directory 
                  class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 flex items-center justify-between ${
                    currentPath.startsWith(link.path) 
                      ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected folder: Background #E0EFFF, text #004CA3
                      : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected folder: Dark mode color #A3A3A3
                  }`}
                >
                  <span>{link.name}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 transform transition-transform duration-300 rotate-90"  // Arrow always rotated 90 degrees to indicate open
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
                <div class="ml-4 mt-2 space-y-2 relative">
                  <div class="absolute left-[-10px] top-0 bottom-0 w-px bg-gray-300 dark:bg-gray-600"></div> <!-- Vertical line -->
                  {link.items.map((subLink, subLinkIndex) => (
                    <a 
                      key={subLinkIndex}
                      href={subLink.path} 
                      class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                        currentPath === subLink.path 
                          ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected file in folder: Background #E0EFFF, text #004CA3
                          : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected files in folder: Dark mode color #A3A3A3
                      }`}
                    >
                      {subLink.name}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={link.path} 
                class={`block px-3 py-1.5 rounded-md text-base font-medium transition-colors duration-300 ${
                  currentPath === link.path 
                    ? 'bg-[#E0EFFF] text-[#004CA3]'  // Selected file: Background #E0EFFF, text #004CA3
                    : 'text-[#6B7280] dark:text-[#A3A3A3] opacity-75 hover:opacity-100 hover:bg-gray-200 dark:hover:bg-gray-800'  // Non-selected files: Dark mode color #A3A3A3
                }`}
              >
                {link.name}
              </a>
            )}
          </div>
        ))}
      </div>
    ))}
  </nav>

  <!-- New Text Links -->
  <div class="mt-6 space-y-3 flex-1 flex flex-col justify-end">
    <a 
      href="#" 
      id="feedback-link"
      class="block text-sm transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Questions? Give us feedback
      <i class="fas fa-arrow-right"></i>
    </a>
    <a 
      href="#" 
      id="edit-link"
      class="block text-sm transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Edit this page on GitHub
      <i class="fas fa-arrow-right"></i>
    </a>
    <a 
      href="#"
      onclick="window.scrollTo({ top: 0, behavior: 'smooth' }); return false;" 
      class="block text-sm transition-colors duration-300 text-gray-700 dark:text-gray-300 hover:text-black dark:hover:text-white flex justify-between items-center"
    >
      Scroll to top
      <i class="fas fa-arrow-up"></i>
    </a>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Function to generate and open the GitHub edit link
    document.getElementById('edit-link').addEventListener('click', function(event) {
      event.preventDefault();
      const currentPath = window.location.pathname.replace(/^\//, '').replace(/\/$/, '');
      const filePath = currentPath === '' ? 'index.mdx' : `${currentPath}.mdx`;
      const githubBase = 'https://github.com/Naainz/astro-docs';
      const editUrl = `${githubBase}/edit/main/src/pages/${filePath}`;
      window.open(editUrl, '_blank');
    });

    // Function to generate and open the GitHub feedback issue link
    document.getElementById('feedback-link').addEventListener('click', function(event) {
      event.preventDefault();
      const currentPath = window.location.pathname.replace(/^\//, '').replace(/\/$/, '');
      const githubBase = 'https://github.com/Naainz/astro-docs';
      const issueUrl = `${githubBase}/issues/new?title=Feedback%20for%20“${encodeURIComponent(currentPath || 'Home')}”`;
      window.open(issueUrl, '_blank');
    });
  });
</script>
