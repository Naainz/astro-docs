---
import Sidebar from '../components/Sidebar.astro';
import "../styles/global.css";
import H1 from '../components/H1.astro';
import H2 from '../components/H2.astro';
import H3 from '../components/H3.astro';
import { readFileSync, statSync } from 'fs';
import { join } from 'path';
import matter from 'gray-matter';

const { title } = Astro.props;

// Import and parse the sidebar configuration
import sidebarConfig from '../config/sidebar.json';

const components = {
  h1: H1,
  h2: H2,
  h3: H3,
};

// Helper function to read the frontmatter from an MDX file
function getFrontmatterName(filePath) {
  try {
    if (statSync(filePath).isDirectory()) {
      return ''; // Skip directories
    }
    const fileContent = readFileSync(filePath, 'utf8');
    const { data } = matter(fileContent);
    return data.path || '';
  } catch (error) {
    console.error(`Error reading frontmatter from ${filePath}:`, error);
    return '';
  }
}

// Function to determine the previous and next pages and their names
const findPrevNext = (currentPath, sidebarConfig) => {
  let prev = null;
  let next = null;
  let prevName = '';
  let nextName = '';

  const pagesDir = new URL('../pages', import.meta.url).pathname;

  // Flatten the sidebar items to a single array of paths and names
  const pages = sidebarConfig.order.flatMap((category) =>
    category.items
      .map((item) => {
        if (!item) return null;
        if (typeof item === 'object' && item.redirect) {
          return null; // Skip redirects in the prev/next logic
        }

        const path =
          typeof item === 'string'
            ? item.replace('.mdx', '')
            : item.path.replace('.mdx', '');
        const fullPath = path === 'index' ? '/' : `/${path}`;
        const itemPath = join(pagesDir, item);

        let name;
        let isDirectory = false;

        try {
          isDirectory = statSync(itemPath).isDirectory();
          if (typeof item === 'string') {
            name =
              getFrontmatterName(itemPath) ||
              item
                .replace('.mdx', '')
                .replace(/-/g, ' ')
                .replace(/_/g, ' ')
                .replace(/\b\w/g, (l) => l.toUpperCase());
          } else {
            name = item.name;
          }
        } catch (error) {
          console.error(`Error processing item: ${item}`, error);
          return null;
        }

        return { path: fullPath, name, isDirectory };
      })
      .filter(Boolean)
  );

  const currentIndex = pages.findIndex((page) => page.path === currentPath);

  if (currentIndex > 0) {
    prev = pages[currentIndex - 1].path;
    prevName = pages[currentIndex - 1].name;
  }

  if (currentIndex < pages.length - 1 && !pages[currentIndex]?.isDirectory) {
    next = pages[currentIndex + 1].path;
    nextName = pages[currentIndex + 1].name;
  }

  return { prev, next, prevName, nextName };
};

const { prev, next, prevName, nextName } = findPrevNext(Astro.url.pathname, sidebarConfig);

const currentPath = Astro.url.pathname.replace(/^\//, '').replace(/\/$/, '');
const pageName = currentPath
  .split('/')
  .pop()
  .replace('.mdx', '')
  .replace(/-/g, ' ')
  .replace(/\b\w/g, (l) => l.toUpperCase());
const dirName = currentPath.includes('/') ? currentPath.split('/')[0] : null;
const breadcrumb = [
  { name: 'Documentation', path: '/' },
  dirName && {
    name: dirName.replace(/-/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase()),
    path: `/${dirName}`,
  },
  { name: pageName },
].filter(Boolean);
---

<!DOCTYPE html>
<html lang="en" class="transition-colors duration-500">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title || "AstroDocs"}</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
      .hamburger-icon div {
        transition: all 0.3s ease;
      }
      .hamburger-icon.active .top-line {
        transform: translateY(8px) rotate(45deg);
      }
      .hamburger-icon.active .middle-line {
        opacity: 0;
      }
      .hamburger-icon.active .bottom-line {
        transform: translateY(-8px) rotate(-45deg);
      }

      .github-icon {
        filter: invert(0); /* Default (light mode) */
        transition: filter 0.3s ease;
      }
      .dark .github-icon {
        filter: invert(1); /* Invert the color for dark mode */
      }
      .navbar-text {
        color: #333; /* Default text color for light mode */
        transition: color 0.3s ease;
      }
      .dark .navbar-text {
        color: white; /* Text color in dark mode */
      }
      .dark .prose {
        color: white; /* Text color for MDX content in dark mode */
      }
      .dark .dropdown-menu {
        background-color: #1f2937; /* Dark mode background */
        color: white; /* Dark mode text color */
      }

      .nav-links {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        font-weight: bold;
      }
      .nav-links a {
        display: flex;
        align-items: center;
        color: #004CA3;
        text-decoration: none;
        transition: color 0.3s ease;
      }
      .nav-links a:hover {
        text-decoration: underline;
      }
      .dark .nav-links a {
        color: white;
      }
      .nav-links a span {
        margin: 0 0.5rem;
      }

      .breadcrumb {
        font-size: 0.875rem;
        color: #6B7280; /* Gray color */
        margin-bottom: 1rem;
      }
      .breadcrumb a {
        color: #004CA3;
        text-decoration: none;
      }
      .breadcrumb a:hover {
        text-decoration: underline;
      }
      .dark .breadcrumb {
        color: #A3A3A3; /* Lighter gray for dark mode */
      }
      .dark .breadcrumb a {
        color: #BBE1FA; /* Light blue for dark mode */
      }

      .breadcrumb-arrow {
        margin: 0 0.5rem;
        font-size: 0.875rem;
        color: inherit;
      }

      pre {
        background-color: #2d2d2d;
        color: #fff;
        padding: 1rem;
        border-radius: 0.5rem;
        position: relative;
      }

      #mobile-theme-toggle {
        display: none;
      }

      @media (max-width: 767px) {
        #theme-toggle {
          display: none; /* Hide the desktop toggle */
        }
        #mobile-theme-toggle {
          display: block; /* Show the mobile toggle */
        }
      }
    </style>
  </head>
  <body class="bg-gray-100 text-gray-900 transition-colors duration-500 dark:bg-gray-900 dark:text-gray-100 font-satoshi">
    <nav class="bg-white dark:bg-gray-800 shadow mb-4 transition-colors duration-500 py-4 fixed top-0 inset-x-0 z-50">
      <div class="container mx-auto px-4 flex justify-between items-center">
        <a href="/" class="text-2xl font-bold navbar-text">AstroDocs</a>
        <div class="flex items-center space-x-4">
          <a href="https://github.com/Naainz/astro-docs" target="_blank">
            <img src="/github-mark.svg" alt="GitHub Repository" style="height: 24px;" class="github-icon">
          </a>
          <button id="theme-toggle" class="hidden md:block focus:outline-none text-2xl">
            <i id="theme-toggle-icon" class="fas"></i>
          </button>
          <button id="mobile-menu-toggle" class="hamburger-icon md:hidden focus:outline-none flex flex-col justify-center items-end p-2">
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white top-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white middle-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white bottom-line"></div>
          </button>
        </div>
      </div>
    </nav>

    <div id="mobile-menu" class="dropdown-menu fixed top-0 inset-x-0 bg-white text-gray-900 hidden z-40 transform -translate-y-full transition-transform duration-500 pt-16 h-full dark:bg-gray-800 dark:text-white">
      <div class="p-4 h-full">
        <div id="sidebar-content" class="overflow-y-auto h-full">
          <Sidebar />
        </div>
        <div class="flex items-center space-x-4 mt-4">
          <button id="mobile-theme-toggle" class="focus:outline-none text-2xl">
            <i id="mobile-theme-toggle-icon" class="fas"></i>
          </button>
        </div>
      </div>
    </div>

    <div id="main-content" class="container mx-auto px-4 flex mt-24 transition-opacity duration-500">
      <aside class="hidden md:block w-64">
        <div id="sidebar-content">
          <Sidebar />
        </div>
      </aside>
      <main id="content" class="flex-1 md:ml-6 prose dark:prose-invert max-w-none">
        <nav class="breadcrumb">
          {breadcrumb.map((crumb, index) => (
            <span key={index}>
              {index > 0 && <i class="fas fa-arrow-right breadcrumb-arrow"></i>}
              {crumb.path ? (
                <a href={crumb.path}>{crumb.name}</a>
              ) : (
                <span>{crumb.name}</span>
              )}
            </span>
          ))}
        </nav>
    
        <slot components={components} />
        <hr class="my-6 border-t border-gray-200 dark:border-gray-700" />
        <div class="nav-links">
          {prev ? (
            <a href={prev}>
              <i class="fas fa-arrow-left"></i><span>{prevName}</span>
            </a>
          ) : (
            <span></span>
          )}
          {next ? (
            <a href={next}>
              <span>{nextName}</span>
              <i class="fas fa-arrow-right"></i>
            </a>
          ) : (
            <span></span>
          )}
        </div>
      </main>
    </div>
    
    <script src="/src/scripts/theme.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenu = document.getElementById('mobile-menu');
        const mainContent = document.getElementById('main-content');
        const body = document.body;

        mobileMenuToggle.addEventListener('click', () => {
          mobileMenuToggle.classList.toggle('active');
          if (mobileMenu.classList.contains('-translate-y-full')) {
            mobileMenu.classList.remove('hidden');
            setTimeout(() => {
              mobileMenu.classList.remove('-translate-y-full');
              mobileMenu.classList.add('translate-y-0');
              mainContent.classList.add('opacity-50');
              body.classList.add('bg-gray-800');
            }, 10);
          } else {
            mobileMenu.classList.remove('translate-y-0');
            mobileMenu.classList.add('-translate-y-full');
            mainContent.classList.remove('opacity-50');
            body.classList.remove('bg-gray-800');
            setTimeout(() => {
              mobileMenu.classList.add('hidden');
            }, 500);
          }
        });

        const toggleFolder = (path) => {
          const folder = document.getElementById(path);
          if (folder) {
            folder.classList.toggle('max-h-screen');
            folder.classList.toggle('max-h-0');
            const arrow = document.querySelector(`a[href="${path}"] svg`);
            if (arrow) {
              arrow.classList.toggle('rotate-90');
            }
          }
        };

        const updateActiveLink = () => {
          const currentPath = window.location.pathname;
          const links = document.querySelectorAll('#sidebar-content a');
          links.forEach((link) => {
            const isActive = link.getAttribute('href') === currentPath;
            if (isActive) {
              link.classList.add('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.remove(
                'text-[#6B7280]',
                'dark:text-[#A3A3A3]',
                'hover:opacity-100',
                'hover:bg-gray-200',
                'dark:hover:bg-gray-800'
              );
            } else {
              link.classList.remove('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.add(
                'text-[#6B7280]',
                'dark:text-[#A3A3A3]',
                'hover:opacity-100',
                'hover:bg-gray-200',
                'dark:hover:bg-gray-800'
              );
            }
          });
        };

        const navigateAndToggle = async (event, path) => {
          event.preventDefault();

          const isDirectory = event.currentTarget.hasAttribute('data-directory');
          const decodedPath = decodeURIComponent(path);

          if (isDirectory) {
            toggleFolder(decodedPath);
            history.pushState({}, '', decodedPath);

            try {
              const indexPath = `${decodedPath}`;
              const response = await fetch(indexPath);
              if (!response.ok) {
                throw new Error(`Failed to load directory index: ${response.statusText}`);
              }
              const html = await response.text();
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('#content');
              if (newContent) {
                document.querySelector('#content').innerHTML = newContent.innerHTML;
                updateActiveLink();
              } else {
                console.error('Content not found in the response HTML.');
              }
            } catch (error) {
              console.error(error);
            }
          } else {
            try {
              const response = await fetch(decodedPath);
              if (!response.ok) {
                throw new Error(`Failed to load content: ${response.statusText}`);
              }
              const html = await response.text();
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('#content');
              if (newContent) {
                document.querySelector('#content').innerHTML = newContent.innerHTML;
                history.pushState({}, '', decodedPath);
                updateActiveLink();
              } else {
                console.error('Content not found in the response HTML.');
              }
            } catch (error) {
              console.error(error);
            }
          }
        };

        window.navigateAndToggle = navigateAndToggle;

        const links = document.querySelectorAll('a[href^="/"]');
        links.forEach((link) => {
          link.addEventListener('click', (e) =>
            navigateAndToggle(e, link.getAttribute('href'))
          );
        });

        window.addEventListener('popstate', async () => {
          try {
            const response = await fetch(location.pathname);
            if (!response.ok) {
              throw new Error(`Failed to load content: ${response.statusText}`);
            }
            const html = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newContent = doc.querySelector('#content');
            if (newContent) {
              document.querySelector('#content').innerHTML = newContent.innerHTML;
              updateActiveLink();
            } else {
              console.error('Content not found in the response HTML.');
            }
          } catch (error) {
            console.error(error);
          }
        });

        updateActiveLink();
      });
    </script>
  </body>
</html>
