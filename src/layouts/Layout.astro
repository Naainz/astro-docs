---
import Sidebar from '../components/Sidebar.astro';
import "../styles/global.css";
import H1 from '../components/H1.astro';
import H2 from '../components/H2.astro';
import H3 from '../components/H3.astro';

const { title } = Astro.props;

const components = {
  h1: H1,
  h2: H2,
  h3: H3,
};
---

<!DOCTYPE html>
<html lang="en" class="transition-colors duration-500">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title || "AstroDocs"}</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
      .hamburger-icon div {
        transition: all 0.3s ease;
      }
      .hamburger-icon.active .top-line {
        transform: translateY(8px) rotate(45deg);
      }
      .hamburger-icon.active .middle-line {
        opacity: 0;
      }
      .hamburger-icon.active .bottom-line {
        transform: translateY(-8px) rotate(-45deg);
      }
      
      /* Ensure GitHub icon and text adapt to dark mode */
      .github-icon {
        filter: invert(0); /* Default (light mode) */
        transition: filter 0.3s ease;
      }
      .dark .github-icon {
        filter: invert(1); /* Invert the color for dark mode */
      }
      .navbar-text {
        color: #333; /* Default text color for light mode */
        transition: color 0.3s ease;
      }
      .dark .navbar-text {
        color: white; /* Text color in dark mode */
      }
      /* Dark mode text for the main content */
      .dark .prose {
        color: white; /* Text color for MDX content in dark mode */
      }
    </style>
  </head>
  <body class="bg-gray-100 text-gray-900 transition-colors duration-500 dark:bg-gray-900 dark:text-gray-100 font-satoshi">
    <nav class="bg-white dark:bg-gray-800 shadow mb-4 transition-colors duration-500 py-4 fixed top-0 inset-x-0 z-50">
      <div class="container mx-auto px-4 flex justify-between items-center">
        <a href="/" class="text-2xl font-bold navbar-text">AstroDocs</a>
        <div class="flex items-center space-x-4">
          <a href="https://github.com/Naainz/astro-docs" target="_blank">
            <img src="/github-mark.svg" alt="GitHub Repository" style="height: 24px;" class="github-icon">
          </a>
          <button id="theme-toggle" class="hidden md:block focus:outline-none text-2xl">
            <i id="theme-toggle-icon" class="fas"></i>
          </button>
          <button id="mobile-menu-toggle" class="hamburger-icon md:hidden focus:outline-none flex flex-col justify-center items-end p-2">
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white top-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white middle-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white bottom-line"></div>
          </button>
        </div>
      </div>
    </nav>

    <div id="mobile-menu" class="fixed top-0 inset-x-0 bg-white text-gray-900 hidden z-40 transform -translate-y-full transition-transform duration-500 pt-16 h-full">
      <div class="p-4 h-full">
        <div id="sidebar-content" class="overflow-y-auto h-full">
          <Sidebar />
        </div>
        <div class="flex items-center space-x-4 mt-4">
          <button id="mobile-theme-toggle" class="focus:outline-none text-2xl">
            <i id="mobile-theme-toggle-icon" class="fas"></i>
          </button>
        </div>
      </div>
    </div>

    <div id="main-content" class="container mx-auto px-4 flex mt-24 transition-opacity duration-500">
      <aside class="hidden md:block w-64">
        <div id="sidebar-content">
          <Sidebar />
        </div>
      </aside>
      <main id="content" class="flex-1 md:ml-6 prose dark:prose-invert max-w-none">
        <slot components={components} />
      </main>
    </div>
    
    <script src="/src/scripts/theme.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenu = document.getElementById('mobile-menu');
        const mainContent = document.getElementById('main-content');
        const sidebarContent = document.getElementById('sidebar-content');
        const body = document.body;

        mobileMenuToggle.addEventListener('click', () => {
          mobileMenuToggle.classList.toggle('active');
          if (mobileMenu.classList.contains('-translate-y-full')) {
            mobileMenu.classList.remove('hidden');
            setTimeout(() => {
              mobileMenu.classList.remove('-translate-y-full');
              mobileMenu.classList.add('translate-y-0');
              mainContent.classList.add('opacity-50');
              body.classList.add('bg-gray-800');
            }, 10);
          } else {
            mobileMenu.classList.remove('translate-y-0');
            mobileMenu.classList.add('-translate-y-full');
            mainContent.classList.remove('opacity-50');
            body.classList.remove('bg-gray-800');
            setTimeout(() => {
              mobileMenu.classList.add('hidden');
            }, 500);
          }
        });

        const mediaQuery = window.matchMedia('(min-width: 768px)');
        mediaQuery.addEventListener('change', (e) => {
          if (e.matches) {
            mobileMenu.classList.remove('translate-y-0');
            mobileMenu.classList.add('-translate-y-full');
            mainContent.classList.remove('opacity-50');
            body.classList.remove('bg-gray-800');
            setTimeout(() => {
              mobileMenu.classList.add('hidden');
              mobileMenuToggle.classList.remove('active');
            }, 500);
          }
        });

        const updateActiveLink = () => {
          const currentPath = window.location.pathname;
          const links = document.querySelectorAll('#sidebar-content a');
          links.forEach(link => {
            const isActive = link.getAttribute('href') === currentPath;
            if (isActive) {
              link.classList.add('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.remove('text-[#6B7280]', 'dark:text-[#A3A3A3]', 'hover:opacity-100', 'hover:bg-gray-200', 'dark:hover:bg-gray-800');
            } else {
              link.classList.remove('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.add('text-[#6B7280]', 'dark:text-[#A3A3A3]', 'hover:opacity-100', 'hover:bg-gray-200', 'dark:hover:bg-gray-800');
            }
          });
        };

        const toggleFolder = (event, path) => {
          event.preventDefault();
          const folder = document.getElementById(path);
          if (folder) {
            folder.classList.toggle('max-h-screen');
            folder.classList.toggle('max-h-0');
            const arrow = event.currentTarget.querySelector('svg');
            if (arrow) {
              arrow.classList.toggle('rotate-90');
            }
          }
        };

        // Handle client-side navigation
        const links = document.querySelectorAll('a[href^="/"]');
        links.forEach(link => {
          link.addEventListener('click', async (e) => {
            e.preventDefault();
            const href = link.getAttribute('href');
            const response = await fetch(href);
            const html = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newContent = doc.querySelector('#content').innerHTML;
            const newSidebar = doc.querySelector('#sidebar-content').innerHTML;
            document.querySelector('#content').innerHTML = newContent;
            document.querySelector('#sidebar-content').innerHTML = newSidebar;
            history.pushState({}, '', href);
            updateActiveLink();  // Update the active link after content is loaded

            // Reapply folder toggle logic
            const newLinks = document.querySelectorAll('a[href^="/"]');
            newLinks.forEach(newLink => {
              if (newLink.closest('.sidebar-folder')) {
                newLink.addEventListener('click', (event) => toggleFolder(event, newLink.getAttribute('href')));
              }
            });
          });
        });

        // Handle back/forward navigation
        window.addEventListener('popstate', async () => {
          const response = await fetch(location.pathname);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newContent = doc.querySelector('#content').innerHTML;
          const newSidebar = doc.querySelector('#sidebar-content').innerHTML;
          document.querySelector('#content').innerHTML = newContent;
          document.querySelector('#sidebar-content').innerHTML = newSidebar;
          updateActiveLink();  // Update the active link when navigating via history

          // Reapply folder toggle logic
          const newLinks = document.querySelectorAll('a[href^="/"]');
          newLinks.forEach(newLink => {
            if (newLink.closest('.sidebar-folder')) {
              newLink.addEventListener('click', (event) => toggleFolder(event, newLink.getAttribute('href')));
            }
          });
        });

        // Initial update of active link
        updateActiveLink();
      });
    </script>
  </body>
</html>
