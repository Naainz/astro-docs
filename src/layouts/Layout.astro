---
import Sidebar from '../components/Sidebar.astro';
import "../styles/global.css";
import H1 from '../components/H1.astro';
import H2 from '../components/H2.astro';
import H3 from '../components/H3.astro';

const { title } = Astro.props;

// Import and parse the sidebar configuration
import sidebarConfig from '../config/sidebar.json';
import { readdirSync, statSync, readFileSync } from 'fs';
import { basename, join } from 'path';
import matter from 'gray-matter';

const components = {
  h1: H1,
  h2: H2,
  h3: H3,
};

// Function to check if a path is a directory
function isDirectory(path) {
  return statSync(path).isDirectory();
}

// Function to read the frontmatter of an MDX file and return its name and path
function getPageData(filePath, parentDir = '') {
  if (isDirectory(filePath)) return null; // Skip directories
  const fileContent = readFileSync(filePath, 'utf8');
  const { data } = matter(fileContent);
  const fileName = basename(filePath, '.mdx');

  // If the file is 'index.mdx', treat it as the root path or the parent directory path
  const path = fileName === 'index' ? (parentDir || '/') : `/${parentDir}${fileName}`;
  const name = data.path || (fileName === 'index' ? parentDir.slice(0, -1) || 'Home' : fileName).replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());

  // Return the page's path and name
  return { path, name, relativePath: join(parentDir, fileName + '.mdx') };
}

// Determine the current file based on the URL path
const currentPath = Astro.url.pathname.replace(/^\//, '').replace(/\/$/, '') || '/';

// Build the links structure from the config file
const categories = sidebarConfig.order.map(category => {
  const categoryItems = category.items.map(fileOrDir => {
    if (typeof fileOrDir === 'object' && fileOrDir.redirect) {
      // Handle redirect links
      return {
        name: fileOrDir.name,
        redirect: fileOrDir.redirect
      };
    }

    const fullPath = join(new URL('../pages', import.meta.url).pathname, fileOrDir);
    if (isDirectory(fullPath)) {
      const dirFiles = readdirSync(fullPath)
        .filter(file => file.endsWith('.mdx') && file !== 'index.mdx') // Exclude 'index.mdx' from being listed as a separate file
        .map(file => getPageData(join(fullPath, file), `${fileOrDir}/`))
        .filter(Boolean); // Filter out null values

      return {
        name: getPageData(join(fullPath, 'index.mdx'), `${fileOrDir}/`)?.name || fileOrDir.replace(/-/g, ' ').replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
        path: `/${fileOrDir}/`,
        isDirectory: true,
        items: dirFiles,
      };
    } else {
      return getPageData(fullPath);
    }
  }).filter(Boolean); // Filter out null values

  return {
    name: category.category,
    items: categoryItems
  };
});

// Function to determine the next and previous page names
const findPrevNext = (currentPath, categories) => {
  const flatPages = [];

  // Traverse categories and items to create a flat list of pages
  categories.forEach(category => {
    category.items.forEach(item => {
      if (item.isDirectory) {
        item.items.forEach(subItem => {
          flatPages.push(subItem);
        });
      } else {
        flatPages.push(item);
      }
    });
  });

  // Find the index of the current page
  const currentIndex = flatPages.findIndex(page => page.path === currentPath);

  // Determine previous and next pages
  const prev = currentIndex > 0 ? flatPages[currentIndex - 1] : null;
  const next = currentIndex < flatPages.length - 1 ? flatPages[currentIndex + 1] : null;

  return { prev, next };
};

// Extract the previous and next pages based on the current path
const { prev, next } = findPrevNext(currentPath, categories);
---

<!DOCTYPE html>
<html lang="en" class="transition-colors duration-500">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title || "AstroDocs"}</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
      .hamburger-icon div {
        transition: all 0.3s ease;
      }
      .hamburger-icon.active .top-line {
        transform: translateY(8px) rotate(45deg);
      }
      .hamburger-icon.active .middle-line {
        opacity: 0;
      }
      .hamburger-icon.active .bottom-line {
        transform: translateY(-8px) rotate(-45deg);
      }

      /* Ensure GitHub icon and text adapt to dark mode */
      .github-icon {
        filter: invert(0); /* Default (light mode) */
        transition: filter 0.3s ease;
      }
      .dark .github-icon {
        filter: invert(1); /* Invert the color for dark mode */
      }
      .navbar-text {
        color: #333; /* Default text color for light mode */
        transition: color 0.3s ease;
      }
      .dark .navbar-text {
        color: white; /* Text color in dark mode */
      }
      /* Dark mode text for the main content */
      .dark .prose {
        color: white; /* Text color for MDX content in dark mode */
      }

      /* Dark mode background for the dropdown menu */
      .dark .dropdown-menu {
        background-color: #1f2937; /* Dark mode background */
        color: white; /* Dark mode text color */
      }

      /* Styles for the navigation arrows at the bottom */
      .nav-links {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 0;
        font-weight: bold;
      }
      .nav-links a {
        display: flex;
        align-items: center;
        color: #004CA3;
        text-decoration: none;
        transition: color 0.3s ease;
      }
      .nav-links a:hover {
        text-decoration: underline;
      }
      .dark .nav-links a {
        color: white;
      }
      .nav-links a span {
        margin: 0 0.5rem;
      }

      /* Ensure the theme toggle is hidden on larger screens */
      #mobile-theme-toggle {
        display: none;
      }

      /* Show the theme toggle in the dropdown on smaller screens */
      @media (max-width: 767px) {
        #theme-toggle {
          display: none; /* Hide the desktop toggle */
        }
        #mobile-theme-toggle {
          display: block; /* Show the mobile toggle */
        }
      }
    </style>
  </head>
  <body class="bg-gray-100 text-gray-900 transition-colors duration-500 dark:bg-gray-900 dark:text-gray-100 font-satoshi">
    <nav class="bg-white dark:bg-gray-800 shadow mb-4 transition-colors duration-500 py-4 fixed top-0 inset-x-0 z-50">
      <div class="container mx-auto px-4 flex justify-between items-center">
        <a href="/" class="text-2xl font-bold navbar-text">AstroDocs</a>
        <div class="flex items-center space-x-4">
          <a href="https://github.com/Naainz/astro-docs" target="_blank">
            <img src="/github-mark.svg" alt="GitHub Repository" style="height: 24px;" class="github-icon">
          </a>
          <button id="theme-toggle" class="hidden md:block focus:outline-none text-2xl">
            <i id="theme-toggle-icon" class="fas"></i>
          </button>
          <button id="mobile-menu-toggle" class="hamburger-icon md:hidden focus:outline-none flex flex-col justify-center items-end p-2">
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white top-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white middle-line mb-1.5"></div>
            <div class="w-6 h-0.5 bg-gray-900 dark:bg-white bottom-line"></div>
          </button>
        </div>
      </div>
    </nav>

    <div id="mobile-menu" class="dropdown-menu fixed top-0 inset-x-0 bg-white text-gray-900 hidden z-40 transform -translate-y-full transition-transform duration-500 pt-16 h-full dark:bg-gray-800 dark:text-white">
      <div class="p-4 h-full">
        <div id="sidebar-content" class="overflow-y-auto h-full">
          <Sidebar />
        </div>
        <div class="flex items-center space-x-4 mt-4">
          <button id="mobile-theme-toggle" class="focus:outline-none text-2xl">
            <i id="mobile-theme-toggle-icon" class="fas"></i>
          </button>
        </div>
      </div>
    </div>

    <div id="main-content" class="container mx-auto px-4 flex mt-24 transition-opacity duration-500">
      <aside class="hidden md:block w-64">
        <div id="sidebar-content">
          <Sidebar />
        </div>
      </aside>
      <main id="content" class="flex-1 md:ml-6 prose dark:prose-invert max-w-none">
        <slot components={components} />
        <!-- Navigation Links at the Bottom -->
        <hr class="my-6 border-t border-gray-200 dark:border-gray-700" />
        <div class="nav-links">
          {prev ? (
            <a href={prev.path}>
              <i class="fas fa-arrow-left"></i><span>{prev.name}</span>
            </a>
          ) : (
            <span></span>
          )}
          {next ? (
            <a href={next.path}>
              <span>{next.name}</span><i class="fas fa-arrow-right"></i>
            </a>
          ) : (
            <span></span>
          )}
        </div>
      </main>
    </div>

    <script src="/src/scripts/theme.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenu = document.getElementById('mobile-menu');
        const mainContent = document.getElementById('main-content');
        const body = document.body;

        mobileMenuToggle.addEventListener('click', () => {
          mobileMenuToggle.classList.toggle('active');
          if (mobileMenu.classList.contains('-translate-y-full')) {
            mobileMenu.classList.remove('hidden');
            setTimeout(() => {
              mobileMenu.classList.remove('-translate-y-full');
              mobileMenu.classList.add('translate-y-0');
              mainContent.classList.add('opacity-50');
              body.classList.add('bg-gray-800');
            }, 10);
          } else {
            mobileMenu.classList.remove('translate-y-0');
            mobileMenu.classList.add('-translate-y-full');
            mainContent.classList.remove('opacity-50');
            body.classList.remove('bg-gray-800');
            setTimeout(() => {
              mobileMenu.classList.add('hidden');
            }, 500);
          }
        });

        const toggleFolder = (path) => {
          const folder = document.getElementById(path);
          if (folder) {
            folder.classList.toggle('max-h-screen');
            folder.classList.toggle('max-h-0');
            const arrow = document.querySelector(`a[href="${path}"] svg`);
            if (arrow) {
              arrow.classList.toggle('rotate-90');
            }
          }
        };

        const updateActiveLink = () => {
          const currentPath = window.location.pathname;
          const links = document.querySelectorAll('#sidebar-content a');
          links.forEach(link => {
            const isActive = link.getAttribute('href') === currentPath;
            if (isActive) {
              link.classList.add('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.remove('text-[#6B7280]', 'dark:text-[#A3A3A3]', 'hover:opacity-100', 'hover:bg-gray-200', 'dark:hover:bg-gray-800');
            } else {
              link.classList.remove('bg-[#E0EFFF]', 'text-[#004CA3]');
              link.classList.add('text-[#6B7280]', 'dark:text-[#A3A3A3]', 'hover:opacity-100', 'hover:bg-gray-200', 'dark:hover:bg-gray-800');
            }
          });
        };

        const navigateAndToggle = async (event, path) => {
          event.preventDefault();

          const isDirectory = event.currentTarget.hasAttribute('data-directory');
          const decodedPath = decodeURIComponent(path);

          if (isDirectory) {
            toggleFolder(decodedPath);  // Toggle the folder dropdown if it's a directory
            history.pushState({}, '', decodedPath);  // Update URL without reloading

            // Fetch and load the directory's index content
            try {
              const indexPath = `${decodedPath}`;
              const response = await fetch(indexPath);
              if (!response.ok) {
                throw new Error(`Failed to load directory index: ${response.statusText}`);
              }
              const html = await response.text();
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('#content');
              if (newContent) {
                document.querySelector('#content').innerHTML = newContent.innerHTML;
                updateActiveLink();  // Update the active link after content is loaded
              } else {
                console.error("Content not found in the response HTML.");
              }
            } catch (error) {
              console.error(error);
            }
          } else {
            // Handle regular file loading
            try {
              const response = await fetch(decodedPath);
              if (!response.ok) {
                throw new Error(`Failed to load content: ${response.statusText}`);
              }
              const html = await response.text();
              const parser = new DOMParser();
              const doc = parser.parseFromString(html, 'text/html');
              const newContent = doc.querySelector('#content');
              if (newContent) {
                document.querySelector('#content').innerHTML = newContent.innerHTML;
                history.pushState({}, '', decodedPath);  // Update the history with the decoded path
                updateActiveLink();  // Update the active link after content is loaded
              } else {
                console.error("Content not found in the response HTML.");
              }
            } catch (error) {
              console.error(error);
            }
          }
        };

        window.navigateAndToggle = navigateAndToggle;

        const links = document.querySelectorAll('a[href^="/"]');
        links.forEach(link => {
          link.addEventListener('click', (e) => navigateAndToggle(e, link.getAttribute('href')));
        });

        window.addEventListener('popstate', async () => {
          try {
            const response = await fetch(location.pathname);
            if (!response.ok) {
              throw new Error(`Failed to load content: ${response.statusText}`);
            }
            const html = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newContent = doc.querySelector('#content');
            if (newContent) {
              document.querySelector('#content').innerHTML = newContent.innerHTML;
              updateActiveLink();  // Update the active link when navigating via history
            } else {
              console.error("Content not found in the response HTML.");
            }
          } catch (error) {
            console.error(error);
          }
        });

        updateActiveLink();
      });
    </script>
  </body>
</html>
